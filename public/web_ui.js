// Generated by CoffeeScript 1.7.1
(function() {
  var webUi;

  webUi = (function($) {
    var METHODS, REQUIRED_URLS, addMessage, buildTree, handleMessage, handleMessages, init, nodeFromData, nodesFromData, notice, removeMessage, types_, urls_;
    METHODS = {
      ajax: {}
    };
    REQUIRED_URLS = ['tree'];
    types_ = urls_ = void 0;

    /* addMessage(Str text, Str classes?)
    Shows a message with the given text. Additional CSS classes may be given as a
    space-separated string. Returns the message's $div.
     */
    addMessage = function(text, classes) {
      var $div;
      $div = $('<div class="message"></div>').text(text).hide();
      if (classes) {
        $div.addClass(classes);
      }
      return $div.appendTo('#messages').slideDown();
    };

    /* removeMessage($div)
    Hides and removes the given message. Returns the $div to be removed after it gets done
    sliding up, whatever good that'll do ya. You should probably just leave it alone.
     */
    removeMessage = function($div) {
      return $div.slideUp({
        complete: function() {
          return $div.remove();
        }
      });
    };

    /* notice(Str text, Str classes?)
    Dispatches to addMessage, waits five seconds and then calls removeMessage. Happens to
    return the timeout ID of the five-second wait.
     */
    notice = function(text, classes) {
      var $div;
      $div = addMessage(text, classes);
      return setTimeout((function() {
        return removeMessage($div);
      }), 5000);
    };

    /* handleMessage(Str|{Str :text, Str :type} msg)
    Defers to notice. I can't explain it simpler or shorter than the code.
     */
    handleMessage = function(msg) {
      if (typeof msg === 'string') {
        notice(msg);
      } else {
        notice(msg.text, msg.type);
      }
    };

    /* handleMessages({Object|[Object] :messages} data)
    Defers to handleMessage for each message in the given data, if that object has a
    ``messages'' property. It may either be a single message or an array of them.
     */
    handleMessages = function(data) {
      var m, messages, _i, _len;
      if (data && 'messages' in data && (messages = data.messages)) {
        if ($.isArray(messages)) {
          for (_i = 0, _len = messages.length; _i < _len; _i++) {
            m = messages[_i];
            handleMessage(m);
          }
        } else {
          handleMessage(messages);
        }
      }
    };
    nodeFromData = function(type, data) {
      var arg, args, i, node, text, typeInfo, _i, _len, _ref;
      typeInfo = types_[type] || (function() {
        throw "Got invalid type from server: " + type;
      })();
      if ('text' in typeInfo) {
        args = [];
        _ref = typeInfo.text.args;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          arg = _ref[i];
          args[i] = data[arg];
        }
        text = vsprintf(typeInfo.text.format, args);
      }
      return node = {
        type: type,
        id: data.uuid,
        text: text || data.name,
        children: nodesFromData(data)
      };
    };
    nodesFromData = function(data) {
      var c, d, e, nodes, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      nodes = [];
      if ('employees' in data) {
        _ref = data.employees;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          e = _ref[_i];
          nodes.push(nodeFromData('employee', e));
        }
      }
      if ('departments' in data) {
        _ref1 = data.departments;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          d = _ref1[_j];
          nodes.push(nodeFromData('department', d));
        }
      }
      if ('companies' in data) {
        _ref2 = data.companies;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          c = _ref2[_k];
          nodes.push(nodeFromData('company', c));
        }
      }
      return nodes;
    };
    buildTree = function() {
      var $msg;
      $msg = addMessage('Getting tree...', 'load');
      return $.get(urls_.tree, {
        type: 'tree'
      }).done(function(data) {
        var e, nodes;
        try {
          nodes = nodesFromData(data);
          return $('#tree').jstree({
            core: {
              data: nodes
            },
            plugins: ['contextmenu', 'dnd', 'types', 'wholerow'],
            types: types_
          });
        } catch (_error) {
          e = _error;
          return addMessage("Fatal Error: " + e, 'error');
        }
      }).fail(function() {
        return addMessage('Fatal Error: Could not get tree from server.', 'error');
      }).always(function() {
        return removeMessage($msg);
      }).always(handleMessages);
    };

    /* init()
    Loads the configuration information from the server via AJAX and then does a bunch of
    ugly error checking. If it's happy with the result, it defers to buildTree. Otherwise
    it shows a message and the script dies. Then you go fix your broken server code.
     */
    return init = function() {
      var $msg;
      $msg = addMessage('Getting server configuration...', 'load');
      return $.get('/', {
        type: 'config'
      }).done(function(_arg) {
        var e, errs, es, method, ms, types, u, urls, _i, _j, _len, _len1;
        method = _arg.method, urls = _arg.urls, types = _arg.types;
        try {
          errs = [];
          if (ms = METHODS[method]) {

          } else {
            errs.push('Server did not return valid method.');
          }
          if (urls) {
            for (_i = 0, _len = REQUIRED_URLS.length; _i < _len; _i++) {
              u = REQUIRED_URLS[_i];
              if (!(u in urls)) {
                errs.push("Missing required URL for " + u + ".");
              }
            }
          } else {
            errs.push('Server did not return valid URLs.');
          }
          if (!types) {
            errs.push('Server did not return valid types');
          }
          if (errs.length) {
            throw errs;
          }
          types_ = types;
          urls_ = urls;
          buildTree();
        } catch (_error) {
          es = _error;
          if ($.isArray(es)) {
            for (_j = 0, _len1 = es.length; _j < _len1; _j++) {
              e = es[_j];
              addMessage("Fatal Error: " + e, 'error');
            }
          } else {
            addMessage("Fatal Error: " + es, 'error');
          }
        }
      }).fail(function() {
        return addMessage('Fatal Error: Could not get server configuration.', 'error');
      }).always(function() {
        return removeMessage($msg);
      }).always(handleMessages);
    };
  })(jQuery);

  jQuery(webUi);

  jQuery(function() {
    return jQuery('.noscript').remove();
  });

}).call(this);
